# Team RUBIKs
# John Cleaver   : Documentation
# Travis Dillan  : Actual Algorithm
# William Earley : Turns Code and Algorithm Help
# Joseph Sewell  : File I/O and Data Structure Planning

# Rubikâ€™s Cube Solver
# EECS 314
# Project Source Code

# YOU MUST SIGN YOUR SECTIONS WITH YOUR NAME

#
# Static data declaration
#
	.data
	    # Strings
introTxt: .asciiz "Rubik's Cube Solver.\nTeam RUBIKs (John Cleaver, Travis Dillan, Willian Earley, Joe Sewell)\nLoading configuration from "
filename: .asciiz "input.bin"
outFnme : .asciiz "output.txt"
fErrTxt : .asciiz "\nFile error..."
exitTxt : .asciiz "\nProgram exiting. Results output to "
debug   : .asciiz "\n--Current State--"
assert  : .asciiz "\nDebug assertion."
newline : .asciiz "\n"

outBgn  : .ascii "Rubik's Cube Solver Output\n---\n"   # Len: 31
instBgn : .ascii "Rotate "          # Len: 7
nameF   : .asciiz "Front  face "     # Len: 12
nameR   : .asciiz "Right  face "
nameB   : .asciiz "Back   face "
nameL   : .asciiz "Left   face "
nameD   : .asciiz "Down   face "
nameU   : .asciiz "Upper  face "
instCtr : .ascii "counter-"         # Len: 8
instEnd : .ascii "clockwise.\n"     # Len: 11
outEnd  : .ascii "End of output.\n" # Len: 15

        # Data for cube itself
        # each stored in phone keypad order
dF:      .byte 0xAA
frontA:  .byte 0, 0, 0, 0, 0, 0, 0, 0, 0 # Front of cube  (F)
dR:      .byte 0xBB
rightA:  .byte 0, 0, 0, 0, 0, 0, 0, 0, 0 # Right of cube  (R)
dB:      .byte 0xCC
backA:   .byte 0, 0, 0, 0, 0, 0, 0, 0, 0 # Back of cube   (B)
dL:      .byte 0xDD
leftA:   .byte 0, 0, 0, 0, 0, 0, 0, 0, 0 # Left of cube   (L)
dD:      .byte 0xEE
downA:   .byte 0, 0, 0, 0, 0, 0, 0, 0, 0 # Bottom of cube (D)
dU:      .byte 0xFF
upperA:  .byte 0, 0, 0, 0, 0, 0, 0, 0, 0 # Top of cube    (U)

        # Other data
outDesc  : .word 0          # File descriptor for output
storedRt : .word 0          # Stored return address from start
storedRt2: .word 0          # Stored return address during moves

#
# Code Start
#
	.text
        # actual start of the main program, taken from example code
	.globl main
main:				#main has to be a global label
	sw      $ra, storedRt
	
sStart:
        # Displays starting intormation
        #  and stores filename in $a0
        # JOE SEWELL (jks51)
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, introTxt # takes the address of string as an argument 
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, filename
	syscall
    
sLoad:
        # Loads starting configuration from file
        # JOE SEWELL (jks51)
        
    # Open the file, store file descriptor in $s1
    li  $v0, 13     # open (syscall 13)
    la  $a0, filename
    li  $a1, 0      # read
    li  $a2, 0
    syscall
                    # Exit if there's an error
    blt $v0, $zero, sFileErr
    add $s1, $v0, $zero  # Store file descriptor in $s1
    
    # Read front face
    li  $v0, 14     # read (syscall 14)
    add $a0, $s1, $zero
    la  $a1, frontA
    li  $a2, 9
    syscall
    blt $v0, $zero, sFileErr
    
    # Read right face
    li  $v0, 14     # read (syscall 14)
    add $a0, $s1, $zero
    la  $a1, rightA
    li  $a2, 9
    syscall
    blt $v0, $zero, sFileErr
    
    # Read back face
    li  $v0, 14     # read (syscall 14)
    add $a0, $s1, $zero
    la  $a1, backA
    li  $a2, 9
    syscall
    blt $v0, $zero, sFileErr
    
    # Read left face
    li  $v0, 14     # read (syscall 14)
    add $a0, $s1, $zero
    la  $a1, leftA
    li  $a2, 9
    syscall
    blt $v0, $zero, sFileErr
    
    # Read bottom face
    li  $v0, 14     # read (syscall 14)
    add $a0, $s1, $zero
    la  $a1, downA
    li  $a2, 9
    syscall
    blt $v0, $zero, sFileErr
    
    # Read top face
    li  $v0, 14     # read (syscall 14)
    add $a0, $s1, $zero
    la  $a1, upperA
    li  $a2, 9
    syscall
    blt $v0, $zero, sFileErr
    
    # Close the file
    li  $v0, 16     # close (syscall 16)
    add $a0, $s1, $zero
    syscall

sSetupOutput:
        # Sets up the output operations for output file
        # JOE SEWELL (jks51)
    # Open the file, store file descriptor in outDesc
    li  $v0, 13     # open (syscall 13)
    la  $a0, outFnme
    li  $a1, 1      # write
    li  $a2, 0
    syscall
                    # Exit if there's an error
    blt $v0, $zero, sFileErr
    sw $v0, outDesc # Store file descriptor in outDesc
    
    # Write file header
    li  $v0, 15     # write (syscall 15)
    lw  $a0, outDesc
    la  $a1, outBgn
    li  $a2, 31
    syscall
    
    j dBegin

#
# Functions to Call
#

sPrintStep:
        # Prints a step of the solution to the output file
        # Does not actually perform the action
        #  - Face # to rotate in $a0 (0..5: FRBLDU)
        #  - Direction in        $a1 (0-clockwise, 1-counterclockwise)
        # JOE SEWELL (jks51)
        
    # Load $a0 and $a1 into $t0 and $t1
    move $t0, $a0
    move $t1, $a1
    
    # Print first part of line
    li  $v0, 15     # write (syscall 15)
    lw  $a0, outDesc
    la  $a1, instBgn
    li  $a2, 7
    syscall
    
    # Print face
    li  $v0, 15     # write (syscall 15)
    lw  $a0, outDesc
    
    # Choose which face we're rotating
    li  $t2, 0
    beq $t0, $t2, sPrintStep_front
    li  $t2, 1
    beq $t0, $t2, sPrintStep_right
    li  $t2, 2
    beq $t0, $t2, sPrintStep_back
    li  $t2, 3
    beq $t0, $t2, sPrintStep_left
    li  $t2, 4
    beq $t0, $t2, sPrintStep_bottom
    li  $t2, 5
    beq $t0, $t2, sPrintStep_top
    j sPrintStep_Next

    # Load the appropriate string and length
    # JOE SEWELL (jks51)
sPrintStep_front:
    la  $a1, nameF
    j sPrintStep_Next
    
sPrintStep_right:
    la  $a1, nameR
    j sPrintStep_Next
    
sPrintStep_back:
    la  $a1, nameB
    j sPrintStep_Next
    
sPrintStep_left:
    la  $a1, nameL
    j sPrintStep_Next
    
sPrintStep_bottom:
    la  $a1, nameD
    j sPrintStep_Next
    
sPrintStep_top:
    la  $a1, nameU
    j sPrintStep_Next
    
sPrintStep_Next:
    # Actually print the face
    li  $a2, 12
    syscall
    
    # Print "counter" if $t1 set
    beq $t1, $zero, sPrintStep_End
    
sPrintStep_Counter:
    li  $v0, 15     # write (syscall 15)
    lw  $a0, outDesc
    la  $a1, instCtr
    li  $a2, 8
    syscall
    
sPrintStep_End:
    # Print out the end of the line
    li  $v0, 15     # write (syscall 15)
    lw  $a0, outDesc
    la  $a1, instEnd
    li  $a2, 11
    syscall
    
        # DEBUG:
    li	$v0, 4		  #print_str (system call 4)
    la	$a0, assert
    syscall
    
    # Return
    jr $ra
    
sDebugHelper:
    li  $v0, 1       # print_int
    lb  $a0, 0($t1)
    syscall
    li  $v0, 1       # print_int
    lb  $a0, 1($t1)
    syscall
    li  $v0, 1       # print_int
    lb  $a0, 2($t1)
    syscall
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    
    li  $v0, 1       # print_int
    lb  $a0, 3($t1)
    syscall
    li  $v0, 1       # print_int
    lb  $a0, 4($t1)
    syscall
    li  $v0, 1       # print_int
    lb  $a0, 5($t1)
    syscall
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    
    li  $v0, 1       # print_int
    lb  $a0, 6($t1)
    syscall
    li  $v0, 1       # print_int
    lb  $a0, 7($t1)
    syscall
    li  $v0, 1       # print_int
    lb  $a0, 8($t1)
    syscall
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    jr $ra
    
sDebugPrint:
    add $t0, $zero, $ra
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, debug
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
	
    # Print Front Face
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, nameF
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    la  $t1, frontA
    jal sDebugHelper
    
    # Print Right Face
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, nameR
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    la  $t1, rightA
    jal sDebugHelper 
    
    # Print Back Face
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, nameB
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    la  $t1, backA
    jal sDebugHelper
    
    # Print Left Face
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, nameL
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    la  $t1, leftA
    jal sDebugHelper
    
    # Print Down Face
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, nameD
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    la  $t1, downA
    jal sDebugHelper
	
	# Print Upper Face
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, nameU
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, newline
	syscall
    la  $t1, upperA
    jal sDebugHelper
    add $ra, $zero, $t0
    jr  $ra

#
# ROTATIONS (Will Earley, Joe Sewell)
#
# $t0, $t1, $t2 are same as in Will's
# $t3, $t4      is address of face
# $t5           is general temporary

eRotD:
    sw      $ra, storedRt2
    
    # Move the adjacent edges
    la  $t3, frontA
    lb  $t0, 8($t3) # move $t0, 26 (Joe: 08)
    lb  $t1, 7($t3) # move $t1, 25 (Joe: 07)
    lb  $t2, 6($t3) # move $t2, 24 (Joe: 06)
    
    la  $t4, leftA
    lb  $t5, 8($t4)
    sb  $t5, 8($t3) # move 26, 17
    lb  $t5, 7($t4)
    sb  $t5, 7($t3) # move 25, 16
    lb  $t5, 6($t4)
    sb  $t5, 6($t3) # move 24, 15

    la  $t3, backA
    lb  $t5, 2($t3) 
    sb  $t5, 8($t4) # move 17, 47
    lb  $t5, 1($t3) 
    sb  $t5, 7($t4) # move 16, 46
    lb  $t5, 0($t3) 
    sb  $t5, 6($t4) # move 15, 45
    
    la  $t4, rightA
    lb  $t5, 8($t4) 
    sb  $t5, 2($t3) # move 47, 33
    lb  $t5, 7($t4) 
    sb  $t5, 1($t3) # move 46, 34
    lb  $t5, 7($t4) 
    sb  $t5, 0($t3) # move 45, 35
    
    sb  $t0, 8($t4) # move 35, $t0
    sb  $t1, 7($t4) # move 34, $t1
    sb  $t2, 6($t4) # move 33, $t2
    
    # Move the face's edges
    la  $t3, downA
    lb  $t0, 0($t3) # move $t0, 36
    lb  $t1, 1($t3) # move $t1, 37

    lb  $t5, 2($t3)
    sb  $t5, 0($t3) # move 36, 38
    lb  $t5, 5($t3)
    sb  $t5, 1($t3) # move 37, 41
    
    lb  $t5, 8($t3)
    sb  $t5, 2($t3) # move 38, 44
    lb  $t5, 7($t3)
    sb  $t5, 5($t3) # move 41, 43
    
    lb  $t5, 6($t3)
    sb  $t5, 8($t3) # move 44, 42
    lb  $t5, 3($t3)
    sb  $t5, 7($t3) # move 43, 39
    
    sb  $t0, 6($t3) # move 42, $t0
    sb  $t1, 3($t3) # move 39, $t1
    
    # DEBUG
    jal sDebugPrint
    
    # Write Rotation
    li  $a0 4
    li  $a1 0
    jal sPrintStep
    
    lw  	$ra, storedRt2	#restore the return address
    jr $ra

#
# TRAVIS' CODE GOES HERE
#

dBegin:
    # DEBUG:
    jal eRotD
    
    # Jump to sEnd when cube has been solved
    # and all steps output
    j sEnd;

sFileErr:
        # Displays file error message
        # JOE SEWELL (jks51)
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, fErrTxt # takes the address of string as an argument 
	syscall
        
sEnd:
        # Exits program
        # JOE SEWELL (jks51)    
    # Write closing line to file
    li  $v0, 15     # write (syscall 15)
    lw  $a0, outDesc
    la  $a1, outEnd
    li  $a2, 15
    syscall
    
    # Close outputFile
    lw  $s1, outDesc
    li  $v0, 16     # close (syscall 16)
    add $a0, $s1, $zero
    syscall

    # Print exit info
    li	$v0, 4		  #print_str (system call 4)
	la	$a0, exitTxt # takes the address of string as an argument 
	syscall
	li	$v0, 4		  #print_str (system call 4)
	la	$a0, outFnme  # takes the address of string as an argument 
	syscall
                       #Usual stuff at the end of the main
	lw  	$ra, storedRt	#restore the return address
	jr	    $ra		        #return to the main program
	nop                     # Makes the assembler happy
